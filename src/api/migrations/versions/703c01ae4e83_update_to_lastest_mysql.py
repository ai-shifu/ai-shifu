"""update to lastest mysql step 1

Revision ID: 703c01ae4e83
Revises: 4d97ba5c8faf
Create Date: 2025-08-16 15:38:52.920001

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = "703c01ae4e83"
down_revision = "4d97ba5c8faf"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("admin_info")
    with op.batch_alter_table("active", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("active_user_record", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("ai_course", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("ai_course_auth", schema=None) as batch_op:
        batch_op.alter_column(
            "created_at",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Creation time",
            existing_nullable=False,
        )
        batch_op.alter_column(
            "updated_at",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("ai_course_buy_record", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("ai_course_lesson_attend", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("ai_course_lesson_attendscript", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("ai_lesson", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("ai_lesson_script", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Update time",
            existing_nullable=False,
        )
        batch_op.drop_index("ix_ai_lesson_script_lesson_status_idx")
        batch_op.drop_index("ix_ai_lesson_script_script_id")

    with op.batch_alter_table("discount", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("discount_record", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("pingxx_order", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("risk_control_result", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("user_conversion", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("user_feedback", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("user_info", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Update time",
            existing_nullable=False,
        )
        batch_op.alter_column(
            "is_admin",
            existing_type=mysql.TINYINT(display_width=1),
            server_default=None,
            existing_comment="is admin",
            existing_nullable=False,
        )
        batch_op.alter_column(
            "is_creator",
            existing_type=mysql.TINYINT(display_width=1),
            server_default=None,
            existing_comment="is creator",
            existing_nullable=False,
        )
        batch_op.drop_column("password_hash")

    with op.batch_alter_table("user_profile", schema=None) as batch_op:
        batch_op.alter_column(
            "profile_type",
            existing_type=mysql.INTEGER(),
            server_default=None,
            existing_comment="profile type: 2900=input_unconf, 2901=input_text, 2902=input_number, 2903=input_select, 2904=input_sex, 2905=input_date",
            existing_nullable=False,
        )
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("user_token", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=None,
            existing_comment="Update time",
            existing_nullable=False,
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("user_token", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("user_profile", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            existing_comment="Update time",
            existing_nullable=False,
        )
        batch_op.alter_column(
            "profile_type",
            existing_type=mysql.INTEGER(),
            server_default=sa.text("'0'"),
            existing_comment="profile type: 2900=input_unconf, 2901=input_text, 2902=input_number, 2903=input_select, 2904=input_sex, 2905=input_date",
            existing_nullable=False,
        )

    with op.batch_alter_table("user_info", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "password_hash",
                mysql.VARCHAR(length=255),
                nullable=False,
                comment="Hashed password",
            )
        )
        batch_op.alter_column(
            "is_creator",
            existing_type=mysql.TINYINT(display_width=1),
            server_default=sa.text("'0'"),
            existing_comment="is creator",
            existing_nullable=False,
        )
        batch_op.alter_column(
            "is_admin",
            existing_type=mysql.TINYINT(display_width=1),
            server_default=sa.text("'0'"),
            existing_comment="is admin",
            existing_nullable=False,
        )
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("user_feedback", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("user_conversion", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("risk_control_result", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("pingxx_order", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("discount_record", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("discount", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("ai_lesson_script", schema=None) as batch_op:
        batch_op.create_index(
            "ix_ai_lesson_script_script_id", ["script_index"], unique=False
        )
        batch_op.create_index(
            "ix_ai_lesson_script_lesson_status_idx",
            ["lesson_id", "status", "script_index"],
            unique=False,
        )
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("ai_lesson", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("ai_course_lesson_attendscript", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("ai_course_lesson_attend", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("ai_course_buy_record", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("ai_course_auth", schema=None) as batch_op:
        batch_op.alter_column(
            "updated_at",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            existing_comment="Update time",
            existing_nullable=False,
        )
        batch_op.alter_column(
            "created_at",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            existing_comment="Creation time",
            existing_nullable=False,
        )

    with op.batch_alter_table("ai_course", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("active_user_record", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            existing_comment="Update time",
            existing_nullable=False,
        )

    with op.batch_alter_table("active", schema=None) as batch_op:
        batch_op.alter_column(
            "updated",
            existing_type=mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            existing_comment="Update time",
            existing_nullable=False,
        )

    op.create_table(
        "admin_info",
        sa.Column(
            "id",
            mysql.BIGINT(),
            autoincrement=True,
            nullable=False,
            comment="Unique ID",
        ),
        sa.Column(
            "user_id", mysql.VARCHAR(length=36), nullable=False, comment="User UUID"
        ),
        sa.Column(
            "username",
            mysql.VARCHAR(length=255),
            nullable=False,
            comment="Login username",
        ),
        sa.Column(
            "name", mysql.VARCHAR(length=255), nullable=False, comment="User real name"
        ),
        sa.Column(
            "password_hash",
            mysql.VARCHAR(length=255),
            nullable=False,
            comment="Hashed password",
        ),
        sa.Column("email", mysql.VARCHAR(length=255), nullable=False, comment="Email"),
        sa.Column("mobile", mysql.VARCHAR(length=20), nullable=False, comment="Mobile"),
        sa.Column(
            "created", mysql.TIMESTAMP(), nullable=False, comment="Creation time"
        ),
        sa.Column(
            "updated",
            mysql.TIMESTAMP(),
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            nullable=False,
            comment="Update time",
        ),
        sa.Column(
            "default_model",
            mysql.VARCHAR(length=255),
            nullable=False,
            comment="Default model",
        ),
        sa.Column(
            "user_state",
            mysql.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="User_state",
        ),
        sa.Column(
            "user_sex",
            mysql.INTEGER(),
            autoincrement=False,
            nullable=True,
            comment="user sex",
        ),
        sa.Column("user_birth", sa.DATE(), nullable=True, comment="user birth"),
        sa.Column(
            "user_avatar",
            mysql.VARCHAR(length=255),
            nullable=True,
            comment="user avatar",
        ),
        sa.Column(
            "user_language",
            mysql.VARCHAR(length=30),
            nullable=True,
            comment="user language",
        ),
        sa.PrimaryKeyConstraint("id"),
        mysql_collate="utf8mb4_0900_ai_ci",
        mysql_default_charset="utf8mb4",
        mysql_engine="InnoDB",
    )
    # ### end Alembic commands ###
