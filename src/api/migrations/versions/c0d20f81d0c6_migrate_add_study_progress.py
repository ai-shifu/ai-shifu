"""migrate: add study progress

Revision ID: c0d20f81d0c6
Revises: f2bda1a75fe9
Create Date: 2025-01-20 07:35:09.912362

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = "c0d20f81d0c6"
down_revision = "f2bda1a75fe9"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ai_course_study_progress",
        sa.Column(
            "id",
            mysql.BIGINT(),
            autoincrement=True,
            nullable=False,
            comment="Unique ID",
        ),
        sa.Column(
            "progress_id", sa.String(length=36), nullable=False, comment="Progress UUID"
        ),
        sa.Column("user_id", sa.String(length=36), nullable=False, comment="User UUID"),
        sa.Column(
            "course_id", sa.String(length=36), nullable=False, comment="Course UUID"
        ),
        sa.Column(
            "chapter_count", sa.Integer(), nullable=False, comment="Chapter Count"
        ),
        sa.Column(
            "chapter_completed_count",
            sa.Integer(),
            nullable=False,
            comment="Chapter Completed Count",
        ),
        sa.Column(
            "chapter_reset_count",
            sa.Integer(),
            nullable=False,
            comment="Chapter Reset Count",
        ),
        sa.Column("is_paid", sa.Integer(), nullable=False, comment="Is Paid"),
        sa.Column("is_completed", sa.Integer(), nullable=False, comment="Is Completed"),
        sa.Column("created", sa.TIMESTAMP(), nullable=False, comment="Creation time"),
        sa.Column("updated", sa.TIMESTAMP(), nullable=False, comment="Update time"),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("ai_course_study_progress", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_ai_course_study_progress_course_id"),
            ["course_id"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_ai_course_study_progress_is_completed"),
            ["is_completed"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_ai_course_study_progress_is_paid"), ["is_paid"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_ai_course_study_progress_progress_id"),
            ["progress_id"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_ai_course_study_progress_user_id"), ["user_id"], unique=False
        )

    op.create_table(
        "ai_lesson_study_progress",
        sa.Column(
            "id",
            mysql.BIGINT(),
            autoincrement=True,
            nullable=False,
            comment="Unique ID",
        ),
        sa.Column(
            "progress_id", sa.String(length=36), nullable=False, comment="Progress UUID"
        ),
        sa.Column(
            "lesson_id", sa.String(length=36), nullable=False, comment="Lesson UUID"
        ),
        sa.Column("begin_time", sa.TIMESTAMP(), nullable=True, comment="Begin Time"),
        sa.Column("end_time", sa.TIMESTAMP(), nullable=True, comment="End Time"),
        sa.Column(
            "sublesson_count", sa.Integer(), nullable=False, comment="Sublesson Count"
        ),
        sa.Column(
            "sublesson_completed_count",
            sa.Integer(),
            nullable=False,
            comment="Sublesson Completed Count",
        ),
        sa.Column("script_index", sa.Integer(), nullable=False, comment="Script Index"),
        sa.Column("script_count", sa.Integer(), nullable=False, comment="Script Count"),
        sa.Column("reset_count", sa.Integer(), nullable=False, comment="Reset Count"),
        sa.Column(
            "lesson_is_updated",
            sa.Integer(),
            nullable=False,
            comment="Lesson Is Updated",
        ),
        sa.Column("is_completed", sa.Integer(), nullable=False, comment="Is Completed"),
        sa.Column(
            "completed_time", sa.TIMESTAMP(), nullable=True, comment="Completed Time"
        ),
        sa.Column("created", sa.TIMESTAMP(), nullable=False, comment="Creation time"),
        sa.Column("updated", sa.TIMESTAMP(), nullable=False, comment="Update time"),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("ai_lesson_study_progress", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_ai_lesson_study_progress_progress_id"),
            ["progress_id"],
            unique=False,
        )

    # ### end Alembic commands ###


def downgrade():
    with op.batch_alter_table("ai_lesson_study_progress", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_ai_lesson_study_progress_progress_id"))

    op.drop_table("ai_lesson_study_progress")
    with op.batch_alter_table("ai_course_study_progress", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_ai_course_study_progress_user_id"))
        batch_op.drop_index(batch_op.f("ix_ai_course_study_progress_progress_id"))
        batch_op.drop_index(batch_op.f("ix_ai_course_study_progress_is_paid"))
        batch_op.drop_index(batch_op.f("ix_ai_course_study_progress_is_completed"))
        batch_op.drop_index(batch_op.f("ix_ai_course_study_progress_course_id"))

    op.drop_table("ai_course_study_progress")
    # ### end Alembic commands ###
