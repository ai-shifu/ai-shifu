name: Publish Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to publish (must be an existing draft release, e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.validate.outputs.tag }}
      version: ${{ steps.validate.outputs.version }}
      release_id: ${{ steps.validate.outputs.release_id }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Validate tag and get release info
        id: validate
        run: |
          TAG_INPUT="${{ github.event.inputs.tag }}"

          # Validate tag format
          if [[ ! $TAG_INPUT =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "❌ Error: Tag must start with 'v' and follow semantic versioning (e.g., v1.0.0)"
            exit 1
          fi

          # Check if there's a draft release for this tag
          # Note: Draft releases may not have Git tags yet, so we search by tag_name in releases list
          RELEASE_INFO=$(gh api repos/${{ github.repository }}/releases --jq ".[] | select(.tag_name == \"$TAG_INPUT\") | {id: .id, draft: .draft, name: .name}" 2>/dev/null || echo "null")

          if [ "$RELEASE_INFO" = "null" ] || [ -z "$RELEASE_INFO" ]; then
            echo "❌ Error: No release found for tag $TAG_INPUT. Please run 'Prepare Release Draft' first."
            exit 1
          fi

          RELEASE_ID=$(echo "$RELEASE_INFO" | jq -r '.id')
          IS_DRAFT=$(echo "$RELEASE_INFO" | jq -r '.draft')
          RELEASE_NAME=$(echo "$RELEASE_INFO" | jq -r '.name')

          if [ "$IS_DRAFT" != "true" ]; then
            echo "❌ Error: Release $TAG_INPUT is not a draft. It may have already been published."
            exit 1
          fi

          VERSION="${TAG_INPUT#v}"  # Remove 'v' prefix
          echo "tag=$TAG_INPUT" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT

          echo "✅ Validated draft release: $RELEASE_NAME (ID: $RELEASE_ID)"
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

  publish:
    runs-on: ubuntu-latest
    needs: validate
    environment: release  # This triggers the approval gate

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Set up Git user
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create and push Git tag
        run: |
          TAG_NAME="${{ needs.validate.outputs.tag }}"

          # Check if tag already exists in git
          if git tag -l | grep -q "^${TAG_NAME}$"; then
            echo "⚠️ Warning: Git tag $TAG_NAME already exists, skipping tag creation"
          else
            # Create annotated tag
            echo "🏷️ Creating annotated git tag $TAG_NAME..."
            git tag -a "$TAG_NAME" -m "Release $TAG_NAME"

            # Push tag
            echo "⬆️ Pushing git tag..."
            git push origin "$TAG_NAME"

            echo "✅ Git tag created and pushed successfully"
          fi

      - name: Update release body and publish
        run: |
          TAG_NAME="${{ needs.validate.outputs.tag }}"
          RELEASE_ID="${{ needs.validate.outputs.release_id }}"

          echo "📝 Updating and publishing release $TAG_NAME..."

          # Get current release data
          CURRENT_BODY=$(gh api repos/${{ github.repository }}/releases/"$RELEASE_ID" --jq '.body')

          # Remove the draft warning from the body
          UPDATED_BODY=$(echo "$CURRENT_BODY" | sed '/> ⚠️ \*\*This is a draft release\*\*/,/^$/d')

          # Update the release to published state with cleaned body
          gh api repos/${{ github.repository }}/releases/"$RELEASE_ID" \
            --method PATCH \
            --field draft=false \
            --field make_latest=true \
            --field body="$UPDATED_BODY"

          echo "✅ Release $TAG_NAME published successfully!"
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Create release summary
        run: |
          echo "## 🎉 Release Published Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Release**: ${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Git Tag**: Created and pushed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **GitHub Release**: Published and made latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### What happens next?" >> $GITHUB_STEP_SUMMARY
          echo "1. 🐳 Docker images will be built automatically" >> $GITHUB_STEP_SUMMARY
          echo "2. 📦 Images will be pushed to Docker registries" >> $GITHUB_STEP_SUMMARY
          echo "3. 🚀 Deployment configurations will be updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The **Build and Deploy on Release** workflow will start automatically within a few minutes." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[View Published Release](https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate.outputs.tag }})" >> $GITHUB_STEP_SUMMARY

  notify:
    runs-on: ubuntu-latest
    needs: [validate, publish]
    if: always() && (needs.publish.result == 'success' || needs.publish.result == 'failure')

    steps:
      - name: Notify completion
        run: |
          if [ "${{ needs.publish.result }}" = "success" ]; then
            echo "🎉 Release ${{ needs.validate.outputs.tag }} has been successfully published!"
            echo "The build and deployment process will begin automatically."
          else
            echo "❌ Failed to publish release ${{ needs.validate.outputs.tag }}"
            echo "Please check the workflow logs for details."
          fi
