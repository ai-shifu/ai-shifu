name: Automated Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    outputs:
      bump_needed: ${{ steps.bump-version.outputs.bump_needed }}
      tag: ${{ steps.version.outputs.tag }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install commitizen pre-commit

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install pre-commit hooks
        run: |
          if [[ "${ACT:-false}" == "true" ]]; then
            echo "Skipping pre-commit setup in act environment"
            git config --global init.templateDir ""
          else
            pre-commit install
          fi

      - name: Debug git tags availability
        run: |
          echo "üè∑Ô∏è All available tags:"
          git tag -l --sort=-version:refname || echo "No tags found"
          echo ""
          echo "üîç Semantic version tags (v*.*.*):"
          git tag -l --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+" || echo "No semantic version tags found"
          echo ""
          echo "üìã Latest semantic version tag:"
          LATEST_TAG=$(git tag -l --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+" | head -1 || echo "")
          echo "LATEST_TAG='${LATEST_TAG}'"
          echo ""
          echo "üß™ Test version calculation:"
          if [ -n "$LATEST_TAG" ]; then
            CURRENT_VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')
            NEW_VERSION=$(echo "$CURRENT_VERSION" | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            echo "CURRENT_VERSION='$CURRENT_VERSION'"
            echo "CALCULATED_NEW_VERSION='$NEW_VERSION'"
          else
            echo "No semantic version tags found - would start from 0.1.0"
          fi

      - name: Check branch protection status
        id: branch-protection
        run: |
          if git push --dry-run origin main 2>/dev/null; then
            echo "can_push_directly=true" >> $GITHUB_OUTPUT
            echo "Branch allows direct push"
          else
            echo "can_push_directly=false" >> $GITHUB_OUTPUT
            echo "Branch is protected, will need special handling"
          fi

      - name: Bump version automatically
        id: bump-version
        run: |
          # Git-tag-based versioning: Version is determined entirely by git tags
          # No cz.json version updates needed - everything is tag-driven

          echo "üîç Checking for conventional commits that warrant version bump..."
          echo "üìã Current commitizen config:"
          cz info || echo "‚ö†Ô∏è Commitizen info failed"

          echo "üìä Current git status:"
          git status --porcelain

          echo "üè∑Ô∏è Current tags:"
          git tag -l --sort=-version:refname | head -5

          echo "üìù Recent commits:"
          git log --oneline -5

          # Smart commitizen approach: dynamically set version if needed
          echo "üîç Preparing commitizen with correct base version..."

          # Get the latest semantic version tag
          LATEST_TAG=$(git tag -l --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+" | head -1 || echo "")

          if [ -n "$LATEST_TAG" ]; then
            LATEST_VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')
            echo "‚úÖ Found latest semantic version: $LATEST_VERSION"

            # Create a backup of cz.json and temporarily modify it
            cp cz.json cz.json.bak

            # Add version field to cz.json temporarily
            jq --arg version "$LATEST_VERSION" '.commitizen.version = $version' cz.json > cz.json.tmp && mv cz.json.tmp cz.json
            echo "üîß Temporarily set cz.json version to: $LATEST_VERSION"

            # Now run commitizen with correct base version
            if DRY_RUN_OUTPUT=$(cz bump --dry-run --yes 2>&1); then
              echo "üß™ Commitizen dry-run output (with corrected base version):"
              echo "$DRY_RUN_OUTPUT"
              COMMITIZEN_SUCCESS=true
            else
              echo "‚ö†Ô∏è Commitizen dry-run failed even with version correction, exit code $?"
              DRY_RUN_OUTPUT=$(cz bump --dry-run --yes 2>&1 || true)
              echo "üß™ Commitizen dry-run output (with errors):"
              echo "$DRY_RUN_OUTPUT"
              COMMITIZEN_SUCCESS=false
            fi

            # Restore original cz.json (no permanent changes)
            mv cz.json.bak cz.json
            echo "üîÑ Restored original cz.json"

          else
            echo "‚ö†Ô∏è No semantic version tags found, using standard commitizen"

            # Fallback to original approach when no semantic tags exist
            if DRY_RUN_OUTPUT=$(cz bump --dry-run --yes 2>&1); then
              echo "üß™ Commitizen dry-run output:"
              echo "$DRY_RUN_OUTPUT"
              COMMITIZEN_SUCCESS=true
            else
              echo "‚ö†Ô∏è Commitizen dry-run failed with exit code $?"
              DRY_RUN_OUTPUT=$(cz bump --dry-run --yes 2>&1 || true)
              echo "üß™ Commitizen dry-run output (with errors):"
              echo "$DRY_RUN_OUTPUT"
              COMMITIZEN_SUCCESS=false
            fi
          fi

          # Fallback manual calculation if commitizen still produces wrong results
          if echo "$DRY_RUN_OUTPUT" | grep -q "bump: version 0.0.0" && [ -n "$LATEST_TAG" ]; then
            echo "üîÑ Commitizen still used 0.0.0 despite version correction, using manual fallback"
            CURRENT_VERSION=$(echo "$LATEST_TAG" | sed 's/^v//')
            NEW_VERSION=$(echo "$CURRENT_VERSION" | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            echo "‚úÖ Manual calculation: $CURRENT_VERSION ‚Üí $NEW_VERSION"
            DRY_RUN_OUTPUT="bump: version $CURRENT_VERSION ‚Üí $NEW_VERSION"
          fi

          # Check if version bump is needed
          if echo "$DRY_RUN_OUTPUT" | grep -q "bump: version"; then
            echo "bump_needed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Version bump detected based on conventional commits"
          elif echo "$DRY_RUN_OUTPUT" | grep -q "No commits to bump"; then
            echo "bump_needed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No commits to bump - all commits already processed"
            # Exit early to avoid further processing
            exit 0
          elif echo "$DRY_RUN_OUTPUT" | grep -q "No tag matching configuration could be found"; then
            echo "bump_needed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ No previous tags found - this will be the initial release"
          else
            # Fallback: check recent commits manually for conventional commit types
            RECENT_COMMITS=$(git log --oneline --since="$(git tag -l --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+" | head -1 | xargs git log -1 --format=%cd --date=iso || echo '1 week ago')" --grep="^feat:" --grep="^fix:" --grep="^BREAKING CHANGE:" --extended-regexp)
            if [ -n "$RECENT_COMMITS" ]; then
              echo "bump_needed=true" >> $GITHUB_OUTPUT
              echo "‚úÖ Version bump needed based on manual commit analysis"
            else
              echo "bump_needed=false" >> $GITHUB_OUTPUT
              echo "‚ÑπÔ∏è No version bump needed based on commit analysis"
              exit 0
            fi
          fi

          # Only proceed if bump is needed
          BUMP_NEEDED=$(grep "bump_needed=true" $GITHUB_OUTPUT || echo "")
          if [ -n "$BUMP_NEEDED" ]; then

            # Get the new version that commitizen would create
            if echo "$DRY_RUN_OUTPUT" | grep -q "bump: version"; then
              NEW_VERSION=$(echo "$DRY_RUN_OUTPUT" | grep "bump: version" | sed 's/.*‚Üí //' | tr -d ' ')
            else
              # Calculate next version manually if commitizen didn't provide it
              CURRENT_VERSION=$(git tag -l --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+" | head -1 | sed 's/^v//' || echo "0.5.0")
              NEW_VERSION=$(echo "$CURRENT_VERSION" | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            fi
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "üìã New version will be: $NEW_VERSION"

            # Generate changelog content
            LAST_TAG=$(git tag -l --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+" | head -1 || echo "")
            if [ -n "$LAST_TAG" ]; then
              CHANGELOG_CONTENT=$(cz changelog --start-rev=$LAST_TAG --unreleased-version=$NEW_VERSION --dry-run 2>/dev/null || echo "## Changes\n\nAutomated release based on conventional commits")
            else
              CHANGELOG_CONTENT=$(cz changelog --unreleased-version=$NEW_VERSION --dry-run 2>/dev/null || echo "## Changes\n\nInitial automated release")
            fi
            echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            # Create ONLY git tag - no file modifications needed
            # All version info comes from git tags via dynamic version detection
            echo "Creating git tag..."

            # Use manual tag creation to avoid commitizen's second inconsistent run
            echo "üè∑Ô∏è Creating tag manually to ensure version consistency..."

            if git tag -l | grep -q "^v$NEW_VERSION$"; then
              echo "‚ö†Ô∏è Tag v$NEW_VERSION already exists, skipping tag creation"
            else
              # Get previous version for commit message
              PREV_VERSION=$(git tag -l --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+" | head -1 | sed 's/^v//' || echo "0.0.0")

              # Create git tag with proper commit message
              git tag "v$NEW_VERSION" -m "bump: version $PREV_VERSION ‚Üí $NEW_VERSION"
              echo "‚úÖ Manual tag created: v$NEW_VERSION (from $PREV_VERSION)"

              # Create CHANGELOG.md using commitizen
              echo "üìù Generating changelog..."
              if [ -n "$LATEST_TAG" ]; then
                # Temporarily modify cz.json again for changelog generation
                cp cz.json cz.json.bak2
                jq --arg version "$PREV_VERSION" '.commitizen.version = $version' cz.json > cz.json.tmp && mv cz.json.tmp cz.json

                # Generate changelog with correct version context
                if cz changelog --unreleased-version="$NEW_VERSION" --dry-run > CHANGELOG_PREVIEW.md 2>/dev/null; then
                  echo "‚úÖ Changelog preview generated"
                  head -20 CHANGELOG_PREVIEW.md || echo "Changelog preview not available"
                else
                  echo "‚ö†Ô∏è Changelog generation failed, will be created by GitHub release"
                fi

                # Restore cz.json
                mv cz.json.bak2 cz.json
              else
                echo "üìù No previous tags for changelog generation"
              fi
            fi

            # Push based on branch protection status
            if [ "${{ steps.branch-protection.outputs.can_push_directly }}" = "true" ]; then
              echo "üöÄ Pushing tag directly to main branch..."
              git push origin "v$NEW_VERSION"
            else
              echo "‚ö†Ô∏è Branch is protected, using alternative push strategy..."
              # Try with different authentication methods
              git push origin "v$NEW_VERSION" || {
                echo "üîÑ Standard tag push failed, trying with force-with-lease..."
                git push origin "v$NEW_VERSION" --force-with-lease || {
                  echo "‚ùå All push attempts failed. This might be due to branch protection rules."
                  echo "Please check repository settings or use a Personal Access Token (PAT_TOKEN)."
                  echo "You can also temporarily disable branch protection for releases."
                  exit 1
                }
              }
            fi

            echo "‚úÖ Release tag v$NEW_VERSION pushed successfully"
          else
            echo "‚ÑπÔ∏è No version bump processing needed"
          fi

      - name: Display changelog content
        if: steps.bump-version.outputs.bump_needed == 'true'
        run: |
          echo "üìã Generated changelog content:"
          echo "${{ steps.bump-version.outputs.changelog_content }}"

      - name: Get current version
        id: version
        run: |
          if [ "${{ steps.bump-version.outputs.bump_needed }}" = "true" ]; then
            # Use the new version from bump step
            VERSION="${{ steps.bump-version.outputs.new_version }}"
            echo "üìã Using new version from bump: $VERSION"
          else
            # Get latest version from git tags
            LATEST_TAG=$(git tag -l --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+" | head -1)
            if [ -n "$LATEST_TAG" ]; then
              VERSION=${LATEST_TAG#v}  # Remove 'v' prefix
              echo "üìã Using latest git tag version: $VERSION"
            else
              # Fallback: try to get any semantic version tag
              VERSION=$(git tag -l --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+" | head -1 | sed 's/^v//' || echo "1.0.0")
              echo "üìã Using fallback version: $VERSION"
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.bump-version.outputs.bump_needed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body: |
            # AI-Shifu Release ${{ steps.version.outputs.tag }}

            ${{ steps.bump-version.outputs.changelog_content }}

            ## üöÄ Deployment

            ### Docker Images
            ```bash
            # API Server
            docker pull ${{ secrets.DOCKERHUB_USER || 'aishifu' }}/ai-shifu-api:${{ steps.version.outputs.version }}

            # Web Application
            docker pull ${{ secrets.DOCKERHUB_USER || 'aishifu' }}/ai-shifu-web:${{ steps.version.outputs.version }}

            # Cook Web (CMS)
            docker pull ${{ secrets.DOCKERHUB_USER || 'aishifu' }}/ai-shifu-cook-web:${{ steps.version.outputs.version }}
            ```

            ### Quick Start
            ```bash
            # Clone the repository
            git clone https://github.com/ai-shifu/ai-shifu.git
            cd ai-shifu

            # Checkout this release
            git checkout ${{ steps.version.outputs.tag }}

            # Start with Docker
            cd docker
            docker compose up -d
            ```

            ## üìñ Documentation
            - [Installation Manual](INSTALL_MANUAL.md)
            - [Contributing Guide](CONTRIBUTING.md)
            - [Development Guide](AGENTS.md)

            ---
            ü§ñ Generated with [Claude Code](https://claude.ai/code)
          draft: false
          prerelease: false
          make_latest: true

  build-docker:
    needs: release
    runs-on: ubuntu-latest
    if: needs.release.outputs.bump_needed == 'true'
    strategy:
      matrix:
        include:
          - service_name: "build-api"
            image_name_env: "AI_SHIFU_API_IMAGE_NAME"
            context: "src/api"
          - service_name: "build-web"
            image_name_env: "AI_SHIFU_WEB_IMAGE_NAME"
            context: "src/web"
          - service_name: "build-cook-web"
            image_name_env: "AI_SHIFU_COOK_WEB_IMAGE_NAME"
            context: "src/cook-web"

    env:
      DOCKERHUB_USER: ${{ secrets.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      ALIYUN_DOCKER_REGISTRY: ${{ vars.ALIYUN_DOCKER_REGISTRY || 'registry.cn-beijing.aliyuncs.com' }}
      ALIYUN_DOCKER_USERNAME: ${{ secrets.ALIYUN_USER }}
      ALIYUN_DOCKER_PASSWORD: ${{ secrets.ALIYUN_TOKEN }}
      AI_SHIFU_WEB_IMAGE_NAME: ${{ vars.AI_SHIFU_WEB_IMAGE_NAME || 'ai-shifu-web' }}
      AI_SHIFU_API_IMAGE_NAME: ${{ vars.AI_SHIFU_API_IMAGE_NAME || 'ai-shifu-api' }}
      AI_SHIFU_COOK_WEB_IMAGE_NAME: ${{ vars.AI_SHIFU_COOK_WEB_IMAGE_NAME || 'ai-shifu-cook-web' }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set Tag Version
        run: |
          TAG_VERSION="${{ needs.release.outputs.tag }}"
          echo "TAG_VERSION=$TAG_VERSION" >> $GITHUB_ENV
          echo "RELEASE_BUILD=true" >> $GITHUB_ENV
          echo "üè∑Ô∏è Building with tag: $TAG_VERSION"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Login to Aliyun Docker Registry
        uses: docker/login-action@v2
        with:
          username: ${{ env.ALIYUN_DOCKER_USERNAME }}
          password: ${{ env.ALIYUN_DOCKER_PASSWORD }}
          registry: ${{ env.ALIYUN_DOCKER_REGISTRY }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKERHUB_USER }}/${{ env[matrix.image_name_env] }}
            ${{ env.ALIYUN_DOCKER_REGISTRY }}/ai-shifu/${{ env[matrix.image_name_env] }}
          labels: |
            org.opencontainers.image.title=AI-Shifu ${{ matrix.service_name }}
            org.opencontainers.image.description=AI-led chat platform - ${{ matrix.service_name }} service
            org.opencontainers.image.vendor=AI-Shifu Team
            org.opencontainers.image.licenses=Apache-2.0 WITH Commercial-Use-Conditions
            org.opencontainers.image.source=https://github.com/ai-shifu/ai-shifu
            org.opencontainers.image.documentation=https://github.com/ai-shifu/ai-shifu/blob/main/README.md
            org.opencontainers.image.url=https://github.com/ai-shifu/ai-shifu
            org.opencontainers.image.version=${{ env.TAG_VERSION }}
            org.opencontainers.image.revision=${{ github.sha }}
            ai-shifu.license-file=https://github.com/ai-shifu/ai-shifu/blob/main/LICENSE.txt
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ env.TAG_VERSION }},enable=${{ env.RELEASE_BUILD == 'true' }}

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: "${{ matrix.context }}"
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}

      - name: Update Docker Hub repository description
        if: env.RELEASE_BUILD == 'true'
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ env.DOCKERHUB_USER }}
          password: ${{ env.DOCKERHUB_TOKEN }}
          repository: ${{ env.DOCKERHUB_USER }}/${{ env[matrix.image_name_env] }}
          short-description: "AI-Shifu ${{ matrix.service_name }} - AI-led chat platform"
          readme-filepath: ./README.md
