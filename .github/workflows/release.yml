name: Automated Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install commitizen pre-commit

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install pre-commit hooks
        run: |
          if [[ "${ACT:-false}" == "true" ]]; then
            echo "Skipping pre-commit setup in act environment"
            git config --global init.templateDir ""
          else
            pre-commit install
          fi

      - name: Check branch protection status
        id: branch-protection
        run: |
          if git push --dry-run origin main 2>/dev/null; then
            echo "can_push_directly=true" >> $GITHUB_OUTPUT
            echo "Branch allows direct push"
          else
            echo "can_push_directly=false" >> $GITHUB_OUTPUT
            echo "Branch is protected, will need special handling"
          fi

      - name: Bump version automatically
        id: bump-version
        run: |
          # Git-tag-based versioning: Version is determined entirely by git tags
          # No cz.json version updates needed - everything is tag-driven

          echo "🔍 Checking for conventional commits that warrant version bump..."
          echo "📋 Current commitizen config:"
          cz info || echo "⚠️ Commitizen info failed"

          echo "📊 Current git status:"
          git status --porcelain

          echo "🏷️ Current tags:"
          git tag -l --sort=-version:refname | head -5

          echo "🔍 Checking tag format compatibility:"
          LATEST_TAG=$(git tag -l --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+" | head -1)
          if [ -n "$LATEST_TAG" ]; then
            echo "✅ Found compatible semantic version tag: $LATEST_TAG"
          else
            echo "⚠️ No compatible semantic version tags found"
            git tag -l | head -5
          fi

          echo "📝 Recent commits:"
          git log --oneline -5

          # Set environment variable to avoid interactive prompts
          export CI=true
          export COMMITIZEN_NO_PROMPT=1

          # Try commitizen dry-run with error handling and non-interactive flags
          if DRY_RUN_OUTPUT=$(echo "Y" | cz bump --dry-run --yes 2>&1); then
            echo "🧪 Commitizen dry-run output:"
            echo "$DRY_RUN_OUTPUT"
          else
            EXIT_CODE=$?
            echo "⚠️ Commitizen dry-run failed with exit code $EXIT_CODE, trying alternative detection..."
            DRY_RUN_OUTPUT=$(echo "Y" | cz bump --dry-run --yes 2>&1 || true)
            echo "🧪 Commitizen dry-run output (with errors):"
            echo "$DRY_RUN_OUTPUT"

            # If the issue is about no matching tag format, treat as first release
            if echo "$DRY_RUN_OUTPUT" | grep -q "No tag matching configuration"; then
              echo "🔄 No matching tag configuration found, treating as initial release scenario"
              # Force a simple version check for conventional commits
              RECENT_COMMITS=$(git log --oneline --since="1 day ago" --grep="^feat\|^fix\|^BREAKING CHANGE" || true)
              if [ -n "$RECENT_COMMITS" ]; then
                echo "✅ Found conventional commits that warrant a release"
                DRY_RUN_OUTPUT="bump: version 0.6.0 → 0.6.1"
              fi
            fi
          fi

          if echo "$DRY_RUN_OUTPUT" | grep -q "bump: version"; then
            echo "bump_needed=true" >> $GITHUB_OUTPUT
            echo "✅ Version bump detected based on conventional commits"

            # Get the new version that commitizen would create
            NEW_VERSION=$(echo "$DRY_RUN_OUTPUT" | grep "bump: version" | sed 's/.*→ //' | tr -d ' ')
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "📋 New version will be: $NEW_VERSION"

            # Generate changelog content
            LAST_TAG=$(git tag -l --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+" | head -1 || echo "")
            if [ -n "$LAST_TAG" ]; then
              CHANGELOG_CONTENT=$(cz changelog --start-rev=$LAST_TAG --unreleased-version=$NEW_VERSION --dry-run 2>/dev/null || echo "## Changes\n\nAutomated release based on conventional commits")
            else
              CHANGELOG_CONTENT=$(cz changelog --unreleased-version=$NEW_VERSION --dry-run 2>/dev/null || echo "## Changes\n\nInitial automated release")
            fi
            echo "changelog_content<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT

            # Create ONLY git tag - no file modifications needed
            # All version info comes from git tags via dynamic version detection
            echo "Creating git tag..."

            # Try commitizen bump with error handling and proper non-interactive flags
            if ! echo "Y" | cz bump --yes --no-verify; then
              echo "⚠️ Commitizen bump failed, trying manual tag creation..."

              # Manual tag creation as fallback
              if git tag -l | grep -q "^v$NEW_VERSION$"; then
                echo "⚠️ Tag v$NEW_VERSION already exists, skipping tag creation"
              else
                # Get previous version for commit message using improved tag selection
                PREV_TAG=$(git tag -l --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+" | head -1 || echo "v0.0.0")
                PREV_VERSION=${PREV_TAG#v}  # Remove 'v' prefix
                PREV_VERSION=${PREV_VERSION#v}  # Remove 'v' prefix if present
                git tag "v$NEW_VERSION" -m "bump: version $PREV_VERSION → $NEW_VERSION"
                echo "✅ Manual tag created: v$NEW_VERSION"
              fi
            else
              echo "✅ Commitizen tag created successfully"
            fi

            # Push based on branch protection status
            if [ "${{ steps.branch-protection.outputs.can_push_directly }}" = "true" ]; then
              echo "🚀 Pushing tag directly to main branch..."
              git push origin "v$NEW_VERSION"
            else
              echo "⚠️ Branch is protected, using alternative push strategy..."
              # Try with different authentication methods
              git push origin "v$NEW_VERSION" || {
                echo "🔄 Standard tag push failed, trying with force-with-lease..."
                git push origin "v$NEW_VERSION" --force-with-lease || {
                  echo "❌ All push attempts failed. This might be due to branch protection rules."
                  echo "Please check repository settings or use a Personal Access Token (PAT_TOKEN)."
                  echo "You can also temporarily disable branch protection for releases."
                  exit 1
                }
              }
            fi

            echo "✅ Release tag v$NEW_VERSION pushed successfully"
          else
            echo "bump_needed=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No version bump needed based on commit messages"
          fi

      - name: Display changelog content
        if: steps.bump-version.outputs.bump_needed == 'true'
        run: |
          echo "📋 Generated changelog content:"
          echo "${{ steps.bump-version.outputs.changelog_content }}"

      - name: Get current version
        id: version
        run: |
          if [ "${{ steps.bump-version.outputs.bump_needed }}" = "true" ]; then
            # Use the new version from bump step
            VERSION="${{ steps.bump-version.outputs.new_version }}"
            echo "📋 Using new version from bump: $VERSION"
          else
            # Get latest version from git tags
            LATEST_TAG=$(git tag -l --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+" | head -1)
            if [ -n "$LATEST_TAG" ]; then
              VERSION=${LATEST_TAG#v}  # Remove 'v' prefix
              echo "📋 Using latest git tag version: $VERSION"
            else
              # Fallback: use default version
              VERSION="1.0.0"
              echo "📋 Using fallback version: $VERSION"
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.bump-version.outputs.bump_needed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ steps.version.outputs.tag }}
          body: |
            # AI-Shifu Release ${{ steps.version.outputs.tag }}

            ${{ steps.bump-version.outputs.changelog_content }}

            ## 🚀 Deployment

            ### Docker Images
            ```bash
            # API Server
            docker pull ${{ secrets.DOCKERHUB_USER || 'aishifu' }}/ai-shifu-api:${{ steps.version.outputs.version }}

            # Web Application
            docker pull ${{ secrets.DOCKERHUB_USER || 'aishifu' }}/ai-shifu-web:${{ steps.version.outputs.version }}

            # Cook Web (CMS)
            docker pull ${{ secrets.DOCKERHUB_USER || 'aishifu' }}/ai-shifu-cook-web:${{ steps.version.outputs.version }}
            ```

            ### Quick Start
            ```bash
            # Clone the repository
            git clone https://github.com/ai-shifu/ai-shifu.git
            cd ai-shifu

            # Checkout this release
            git checkout ${{ steps.version.outputs.tag }}

            # Start with Docker
            cd docker
            docker compose up -d
            ```

            ## 📖 Documentation
            - [Installation Manual](INSTALL_MANUAL.md)
            - [Contributing Guide](CONTRIBUTING.md)
            - [Development Guide](AGENTS.md)

            ---
            🤖 Generated with [Claude Code](https://claude.ai/code)
          draft: false
          prerelease: false
          make_latest: true
